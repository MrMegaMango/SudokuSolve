def sudoku_solve(board):
#def solveSudoku(self, board: List[List[str]]) -> None:
    """
    Do not return anything, modify board in-place instead.
    """
    board=solve(board)
    return board
    #thought: lay out all the potential for each block in list, reduce from the smallest list and backtrack

    #thought: 
def solve(board):
    #print(board)
    for i in range (9):
        for j in range (9):
            if board[i][j]==".":
                for k in range (1,10):
                    decision=check(board,i,j,k)
                    #print(decision)
                    if decision:
                        board[i][j]=str(k) 
                        if (solve(board)):
                            return True
                        else:
                            board[i][j]="." #need to go back properly here
                return False
    return True

def check(board,i,j,k):
    if str(k) in board[i]:
        return False
    for m in range (0,9):
        if str(k)==board[m][j]:
            return False
    r=int((i)/3)
    c=int((j)/3)
    for row in range (r*3,r*3+3):
        for column in range (c*3,c*3+3):
            if str(k)==board[row][column]:
                return False
    return True

